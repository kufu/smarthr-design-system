---
type Props = {
  colorName: string;
  colorValue: string;
  description: string;
};

const { colorName, colorValue, description } = Astro.props;

// source: https://gist.github.com/danieliser/b4b24c9f772066bcf0a6
const convertHexToRGBA = (colorValue: string): string => {
  let hex = colorValue && colorValue.replace('#', '');

  if (hex.length === 3) {
    hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;
  }

  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);

  return `rgb(${r},${g},${b})`;
};
---

<div class="wrapper">
  <div class="thumbnail" style={{ backgroundColor: colorValue }}></div>
  <div>
    <div class:list={['colorName', 'text']}>{colorName}</div>
    {
      colorValue.startsWith('#') ? (
        <>
          <div class="text">{colorValue}</div>
          <div class="text">{convertHexToRGBA(colorValue)}</div>
        </>
      ) : (
        <div class="text">{colorValue}</div>
      )
    }
    <p class="text">{description}</p>
  </div>
</div>

<style lang="scss">
  .wrapper {
    width: calc(25% - 24px);
    height: auto;

    @include breakpointMobile3 {
      width: calc(50% - 24px);
    }
  }

  .thumbnail {
    width: 100%;
    height: 128px;
    margin-bottom: 12px;
    box-shadow: rgb(235, 236, 240) 0 0 0 1.2px;
  }

  .colorName {
    font-weight: bold;
  }

  .text {
    word-break: break-all;
  }
</style>
